// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PetSite.Models.EFModels
{
    public partial class PetSiteContext : DbContext
    {
        public PetSiteContext()
        {
        }

        public PetSiteContext(DbContextOptions<PetSiteContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Adoption> Adoptions { get; set; }
        public virtual DbSet<AnimailType> AnimailTypes { get; set; }
        public virtual DbSet<AnimalSize> AnimalSizes { get; set; }
        public virtual DbSet<ApplyEvent> ApplyEvents { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<ChildCategory> ChildCategories { get; set; }
        public virtual DbSet<Color> Colors { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<Flavor> Flavors { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<MemberCoupon> MemberCoupons { get; set; }
        public virtual DbSet<MemberTag> MemberTags { get; set; }
        public virtual DbSet<ParentCategory> ParentCategories { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<ProductOrder> ProductOrders { get; set; }
        public virtual DbSet<ProductOrderItem> ProductOrderItems { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<PurchaseItem> PurchaseItems { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomCartItem> RoomCartItems { get; set; }
        public virtual DbSet<RoomImage> RoomImages { get; set; }
        public virtual DbSet<RoomOrder> RoomOrders { get; set; }
        public virtual DbSet<RoomOrderItem> RoomOrderItems { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<Species> Species { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Adoption>(entity =>
            {
                entity.Property(e => e.AdoptDescription).IsRequired();

                entity.Property(e => e.AdoptName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AdoptTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AnimalColor)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.AnimalGenderId).HasColumnName("AnimalGender_Id");

                entity.Property(e => e.AnimalSizeId).HasColumnName("AnimalSize_Id");

                entity.Property(e => e.AnimalTypeId).HasColumnName("AnimalType_Id");

                entity.Property(e => e.AreaAddress)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.FeLv).HasColumnName("FeLV");

                entity.Property(e => e.Fiv).HasColumnName("FIV");

                entity.Property(e => e.Image1).IsRequired();

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.PostType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Post_Type");

                entity.HasOne(d => d.AnimalGender)
                    .WithMany(p => p.Adoptions)
                    .HasForeignKey(d => d.AnimalGenderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Adoptions_Genders");

                entity.HasOne(d => d.AnimalSize)
                    .WithMany(p => p.Adoptions)
                    .HasForeignKey(d => d.AnimalSizeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Adoptions_AnimalSizes");

                entity.HasOne(d => d.AnimalType)
                    .WithMany(p => p.Adoptions)
                    .HasForeignKey(d => d.AnimalTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Adoptions_AnimailTypes");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Adoptions)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Adoptions_Members");
            });

            modelBuilder.Entity<AnimailType>(entity =>
            {
                entity.Property(e => e.AnimailType1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AnimailType");
            });

            modelBuilder.Entity<AnimalSize>(entity =>
            {
                entity.Property(e => e.AnimalSize1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AnimalSize");
            });

            modelBuilder.Entity<ApplyEvent>(entity =>
            {
                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EventId).HasColumnName("Event_Id");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.ApplyEvents)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplyEvents_Events");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.ApplyEvents)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplyEvents_Members");
            });

            modelBuilder.Entity<Cart>(entity =>
            {
                entity.Property(e => e.MemberAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Member_Account");
            });

            modelBuilder.Entity<CartItem>(entity =>
            {
                entity.Property(e => e.CartId).HasColumnName("Cart_Id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProductId).HasColumnName("Product_Id");

                entity.HasOne(d => d.Cart)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.CartId)
                    .HasConstraintName("FK_CartItems_Carts");
            });

            modelBuilder.Entity<ChildCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ParentCategoryId).HasColumnName("ParentCategory_Id");

                entity.HasOne(d => d.ParentCategory)
                    .WithMany(p => p.ChildCategories)
                    .HasForeignKey(d => d.ParentCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChildCategories_ParentCategories");
            });

            modelBuilder.Entity<Color>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Coupon>(entity =>
            {
                entity.Property(e => e.DiscountCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscountName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Event>(entity =>
            {
                entity.Property(e => e.ApplicantLimitedQty).HasColumnName("ApplicantLimitedQTY");

                entity.Property(e => e.ApplyTimeEnd).HasColumnType("datetime");

                entity.Property(e => e.ApplyTimeStart).HasColumnType("datetime");

                entity.Property(e => e.EventApplicantsQty).HasColumnName("EventApplicantsQTY");

                entity.Property(e => e.EventInfo).IsRequired();

                entity.Property(e => e.EventsCategoryName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProgressTimeEnd).HasColumnType("datetime");

                entity.Property(e => e.ProgressTimeStart).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Flavor>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.Property(e => e.GenderType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BirthDate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ConfirmCode).HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<MemberCoupon>(entity =>
            {
                entity.Property(e => e.CouponId).HasColumnName("Coupon_Id");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.MemberCoupons)
                    .HasForeignKey(d => d.CouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MemberCoupons_Coupons");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MemberCoupons)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MemberCoupons_Members");
            });

            modelBuilder.Entity<MemberTag>(entity =>
            {
                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.TagId).HasColumnName("Tag_Id");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MemberTags)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MemberTags_Members");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.MemberTags)
                    .HasForeignKey(d => d.TagId)
                    .HasConstraintName("FK_MemberTags_Tags");
            });

            modelBuilder.Entity<ParentCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategory_Id");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.ParentCategories)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParentCategories_ProductCategories1");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.CategoryId).HasColumnName("Category_Id");

                entity.Property(e => e.ColorId).HasColumnName("Color_Id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FlavorId).HasColumnName("Flavor_Id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.SizeId).HasColumnName("Size_Id");

                entity.Property(e => e.SpeciesId).HasColumnName("Species_Id");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_ProductCategories");

                entity.HasOne(d => d.Color)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Colors");

                entity.HasOne(d => d.Flavor)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.FlavorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Flavors");

                entity.HasOne(d => d.Size)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.SizeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Sizes");

                entity.HasOne(d => d.Species)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.SpeciesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Species");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ProductImage>(entity =>
            {
                entity.Property(e => e.Images).IsRequired();

                entity.Property(e => e.ProductId).HasColumnName("Product_Id");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductImages)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_ProductImages_Products");
            });

            modelBuilder.Entity<ProductOrder>(entity =>
            {
                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CouponId).HasColumnName("Coupon_Id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentId).HasColumnName("Payment_Id");

                entity.Property(e => e.PaymentStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Receiver)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RequestRedfundTime).HasColumnType("datetime");

                entity.Property(e => e.RequestRefund).HasMaxLength(50);

                entity.Property(e => e.ShipmentId).HasColumnName("Shipment_Id");

                entity.Property(e => e.ShipmentStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK_ProductOrders_Coupons");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrders_Members");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.PaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrders_Payments");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ProductOrders)
                    .HasForeignKey(d => d.ShipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrders_Shipments");
            });

            modelBuilder.Entity<ProductOrderItem>(entity =>
            {
                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ProductId).HasColumnName("Product_Id");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductOrderId).HasColumnName("ProductOrder_Id");

                entity.Property(e => e.SubTotal).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductOrderItems)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderItems_ProductOrderItems");

                entity.HasOne(d => d.ProductOrder)
                    .WithMany(p => p.ProductOrderItems)
                    .HasForeignKey(d => d.ProductOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrderItems_ProductOrders1");
            });

            modelBuilder.Entity<Purchase>(entity =>
            {
                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_Id");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Purchases)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Purchases_Suppliers");
            });

            modelBuilder.Entity<PurchaseItem>(entity =>
            {
                entity.HasKey(e => e.PurchasesItemId);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ProductId).HasColumnName("Product_Id");

                entity.Property(e => e.PurchaseId).HasColumnName("Purchase_Id");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PurchaseItems)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseItems_Products");

                entity.HasOne(d => d.Purchase)
                    .WithMany(p => p.PurchaseItems)
                    .HasForeignKey(d => d.PurchaseId)
                    .HasConstraintName("FK_PurchaseItems_Purchases");
            });

            modelBuilder.Entity<Room>(entity =>
            {
                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RoomCartItem>(entity =>
            {
                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.RoomId).HasColumnName("Room_Id");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RoomCartItems)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("FK_RoomCartItems_Members");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.RoomCartItems)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoomCartItems_Rooms");
            });

            modelBuilder.Entity<RoomImage>(entity =>
            {
                entity.Property(e => e.Image).IsRequired();

                entity.Property(e => e.RoomId).HasColumnName("Room_Id");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.RoomImages)
                    .HasForeignKey(d => d.RoomId)
                    .HasConstraintName("FK_RoomImages_Rooms");
            });

            modelBuilder.Entity<RoomOrder>(entity =>
            {
                entity.Property(e => e.CouponId).HasColumnName("Coupon_Id");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.RoomOrders)
                    .HasForeignKey(d => d.CouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoomOrders_Coupons");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RoomOrders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoomOrders_Members");
            });

            modelBuilder.Entity<RoomOrderItem>(entity =>
            {
                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.RoomId).HasColumnName("Room_Id");

                entity.Property(e => e.RoomOrderId).HasColumnName("RoomOrder_Id");

                entity.Property(e => e.RoomPrice).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.RoomOrderItems)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoomOrderItems_Rooms");

                entity.HasOne(d => d.RoomOrder)
                    .WithMany(p => p.RoomOrderItems)
                    .HasForeignKey(d => d.RoomOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoomOrderItems_RoomOrders");
            });

            modelBuilder.Entity<Shipment>(entity =>
            {
                entity.Property(e => e.ShipmentMethod)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Size>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Species>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}